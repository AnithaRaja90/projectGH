{"remainingRequest":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js??ref--10-2!/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js??ref--10-3!/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/nursery.component.ts","dependencies":[{"path":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/nursery.component.ts","mtime":1534603240710},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/var/www/PGH/aug/projectGH/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// Import needed component and dependency\nvar core_1 = require(\"@angular/core\");\nvar nursery_service_1 = require(\"app/entities/service/nursery.service\");\nvar sector_service_1 = require(\"app/entities/service/sector.service\");\nvar nursery_model_1 = require(\"app/shared/model/nursery.model\");\nvar modal_1 = require(\"ngx-bootstrap/modal\");\nvar core_2 = require(\"@angular/core\");\nvar moment = require(\"moment\");\nvar shared_1 = require(\"app/shared\");\nvar zonal_service_1 = require(\"app/entities/service/zonal.service\");\n// Mension the html, css/sass files\nvar NurseryComponent = /** @class */ (function () {\n    function NurseryComponent(zonalService, nurseryService, sectorService) {\n        this.zonalService = zonalService;\n        this.nurseryService = nurseryService;\n        this.sectorService = sectorService;\n        this.nurseryObject = new nursery_model_1.NurseryModel();\n    }\n    NurseryComponent.prototype.ngOnInit = function () {\n        // Call a function to get list of zonals and Nurserys\n        this.getZonalList();\n        this.getNurseryList();\n    };\n    // Call a service function to get list of zonals\n    NurseryComponent.prototype.getZonalList = function () {\n        var _this = this;\n        // Get the list of zone\n        this.zonalService.query().subscribe(function (res) {\n            _this.zonals = res.body;\n        });\n    };\n    // Get the sector value based on zonal id\n    NurseryComponent.prototype.getSector = function (zoneId) {\n        var _this = this;\n        // Get the list of sector\n        this.sectorService.getSectors(zoneId).subscribe(function (res) {\n            _this.sectors = res.body;\n        });\n    };\n    // Call a service function to get list of Nurserys\n    NurseryComponent.prototype.getNurseryList = function () {\n        var _this = this;\n        this.nurseryService.query().subscribe(function (res) {\n            _this.nurserys = res.body;\n        });\n    };\n    NurseryComponent.prototype.save = function () {\n        this.nurseryObject.updatedAt = moment(this.updatedAt, shared_1.DATE_TIME_FORMAT);\n        if (this.nurseryObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.nurseryService.update(this.nurseryObject));\n        }\n        else {\n            this.nurseryObject.createdAt = moment(this.createdAt, shared_1.DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.nurseryService.create(this.nurseryObject));\n        }\n    };\n    NurseryComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) {\n            _this.nurseryModal.hide();\n            _this.nurseryObject = new nursery_model_1.NurseryModel();\n            alert('Nursery Created/Updated Successfully.');\n            _this.getNurseryList();\n        }, function (res) {\n            // alert('Nursery Not Saved.');\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    // show model popup to create nursery value\n    NurseryComponent.prototype.createNursery = function () {\n        this.nurseryObject = new nursery_model_1.NurseryModel();\n        this.nurseryModal.show();\n    };\n    // show model popup to update nursery value\n    NurseryComponent.prototype.getNurseryValue = function (value) {\n        this.nurseryModal.show();\n        this.nurseryObject = value;\n    };\n    // delete nursery value\n    NurseryComponent.prototype.deleteNursery = function (nursery) {\n        var _this = this;\n        this.nurseryService.delete(nursery.id).subscribe(function (data) {\n            alert('Nursery deleted Successfully.');\n            _this.nurserys = _this.nurserys.filter(function (u) { return u !== nursery; });\n        });\n    };\n    Object.defineProperty(NurseryComponent.prototype, \"nursery\", {\n        // Set a current time to a variable\n        set: function (nurseryObject) {\n            this.createdAt = moment(this.nurseryObject.createdAt).format(shared_1.DATE_TIME_FORMAT);\n            this.updatedAt = moment(this.nurseryObject.updatedAt).format(shared_1.DATE_TIME_FORMAT);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    tslib_1.__decorate([\n        core_2.ViewChild('nurseryModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _a || Object)\n    ], NurseryComponent.prototype, \"nurseryModal\", void 0);\n    NurseryComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-nursery',\n            templateUrl: 'nursery.component.html'\n        })\n        /**\n         * Class NurseryComponent used to create/update a nursery, List all nurserys.\n         * Declared an Nursery object to create and update.\n         * Declared an Array variable to set list of Nurserys.\n         * Using a modal popup directive create and update form is displayed.\n         */\n        ,\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof zonal_service_1.ZonalService !== \"undefined\" && zonal_service_1.ZonalService) === \"function\" && _b || Object, typeof (_c = typeof nursery_service_1.NurseryService !== \"undefined\" && nursery_service_1.NurseryService) === \"function\" && _c || Object, typeof (_d = typeof sector_service_1.SectorService !== \"undefined\" && sector_service_1.SectorService) === \"function\" && _d || Object])\n    ], NurseryComponent);\n    return NurseryComponent;\n    var _a, _b, _c, _d;\n}());\nexports.NurseryComponent = NurseryComponent;\n",{"version":3,"file":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/nursery.component.ts","sourceRoot":"","sources":["/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/nursery.component.ts"],"names":[],"mappings":"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","sourcesContent":["// Import needed component and dependency\nimport { Component, OnInit } from '@angular/core';\nimport { NurseryService } from 'app/entities/service/nursery.service';\nimport { SectorService } from 'app/entities/service/sector.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { INursery, NurseryModel } from 'app/shared/model/nursery.model';\nimport { ISector } from 'app/shared/model/sector.model';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { ViewChild } from '@angular/core';\n\nimport * as moment from 'moment';\nimport { DATE_TIME_FORMAT } from 'app/shared';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ZonalService } from 'app/entities/service/zonal.service';\nimport { IZonal } from 'app/shared/model/zonal.model';\n\n// Mension the html, css/sass files\n@Component({\n    selector: 'jhi-nursery',\n    templateUrl: 'nursery.component.html'\n})\n\n/**\n * Class NurseryComponent used to create/update a nursery, List all nurserys.\n * Declared an Nursery object to create and update.\n * Declared an Array variable to set list of Nurserys.\n * Using a modal popup directive create and update form is displayed.\n */\nexport class NurseryComponent implements OnInit {\n    nurseryObject: NurseryModel = new NurseryModel();\n    // create empty array for each service\n    zonals: IZonal[];\n    sectors: ISector[];\n    nurserys: INursery[];\n    createdAt: string;\n    updatedAt: string;\n    // Declare a modal popup\n    @ViewChild('nurseryModal') public nurseryModal: ModalDirective;\n\n    constructor(\n        private zonalService: ZonalService,\n        private nurseryService: NurseryService,\n        private sectorService: SectorService\n    ) {}\n    ngOnInit() {\n        // Call a function to get list of zonals and Nurserys\n        this.getZonalList();\n        this.getNurseryList();\n    }\n\n    // Call a service function to get list of zonals\n    getZonalList(): void {\n        // Get the list of zone\n        this.zonalService.query().subscribe((res: HttpResponse<IZonal[]>) => {\n            this.zonals = res.body;\n        });\n    }\n\n    // Get the sector value based on zonal id\n    getSector(zoneId): void {\n        // Get the list of sector\n        this.sectorService.getSectors(zoneId).subscribe((res: HttpResponse<ISector[]>) => {\n            this.sectors = res.body;\n        });\n    }\n\n    // Call a service function to get list of Nurserys\n    getNurseryList(): void {\n        this.nurseryService.query().subscribe((res: HttpResponse<INursery[]>) => {\n            this.nurserys = res.body;\n        });\n    }\n\n    save() {\n        this.nurseryObject.updatedAt = moment(this.updatedAt, DATE_TIME_FORMAT);\n        if (this.nurseryObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.nurseryService.update(this.nurseryObject));\n        } else {\n            this.nurseryObject.createdAt = moment(this.createdAt, DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.nurseryService.create(this.nurseryObject));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<INursery>>) {\n        result.subscribe(\n            (res: HttpResponse<INursery>) => {\n                this.nurseryModal.hide();\n                this.nurseryObject = new NurseryModel();\n                alert('Nursery Created/Updated Successfully.');\n                this.getNurseryList();\n            },\n            (res: HttpErrorResponse) => {\n                // alert('Nursery Not Saved.');\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    // show model popup to create nursery value\n    createNursery(): void {\n        this.nurseryObject = new NurseryModel();\n        this.nurseryModal.show();\n    }\n\n    // show model popup to update nursery value\n    getNurseryValue(value: NurseryModel): void {\n        this.nurseryModal.show();\n        this.nurseryObject = value;\n    }\n\n    // delete nursery value\n    deleteNursery(nursery: NurseryModel): void {\n        this.nurseryService.delete(nursery.id).subscribe(data => {\n            alert('Nursery deleted Successfully.');\n            this.nurserys = this.nurserys.filter(u => u !== nursery);\n        });\n    }\n\n    // Set a current time to a variable\n    set nursery(nurseryObject: INursery) {\n        this.createdAt = moment(this.nurseryObject.createdAt).format(DATE_TIME_FORMAT);\n        this.updatedAt = moment(this.nurseryObject.updatedAt).format(DATE_TIME_FORMAT);\n    }\n}\n"]}]}