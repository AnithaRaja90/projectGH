{"remainingRequest":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js??ref--10-2!/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js??ref--10-3!/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/sector.component.ts","dependencies":[{"path":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/sector.component.ts","mtime":1534603177958},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/var/www/PGH/aug/projectGH/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// Import needed component and dependency\nvar core_1 = require(\"@angular/core\");\nvar zonal_service_1 = require(\"app/entities/service/zonal.service\");\nvar sector_service_1 = require(\"app/entities/service/sector.service\");\nvar sector_model_1 = require(\"app/shared/model/sector.model\");\nvar modal_1 = require(\"ngx-bootstrap/modal\");\nvar core_2 = require(\"@angular/core\");\nvar moment = require(\"moment\");\nvar shared_1 = require(\"app/shared\");\n// Mension the html, css/sass files\nvar SectorComponent = /** @class */ (function () {\n    function SectorComponent(zonalService, sectorService) {\n        this.zonalService = zonalService;\n        this.sectorService = sectorService;\n        // Create object for model\n        this.sectorObject = new sector_model_1.SectorModel();\n    }\n    SectorComponent.prototype.ngOnInit = function () {\n        // Call a function to get list of zonals and sectors\n        this.getZoneList();\n        this.getSectorList();\n    };\n    // Call a service function to get list of zonals\n    SectorComponent.prototype.getZoneList = function () {\n        var _this = this;\n        // Get the list of zone\n        this.zonalService.query().subscribe(function (res) {\n            _this.zonals = res.body;\n        });\n    };\n    // Call a service function to get list of sectors\n    SectorComponent.prototype.getSectorList = function () {\n        var _this = this;\n        // Get the list of zone\n        this.sectorService.query().subscribe(function (res) {\n            _this.sectors = res.body;\n        });\n    };\n    // Send a sector object to a service (create or update)\n    SectorComponent.prototype.save = function () {\n        // console.log(this.sectorObject);\n        this.sectorObject.updatedAt = moment(this.updatedAt, shared_1.DATE_TIME_FORMAT);\n        if (this.sectorObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.sectorService.update(this.sectorObject));\n        }\n        else {\n            this.sectorObject.createdAt = moment(this.createdAt, shared_1.DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.sectorService.create(this.sectorObject));\n        }\n    };\n    SectorComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) {\n            _this.sectorModal.hide();\n            _this.sectorObject = new sector_model_1.SectorModel();\n            alert('Sector Created/Updated Successfully.');\n            _this.getSectorList();\n        }, function (res) {\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    // show model popup to create sector value\n    SectorComponent.prototype.createSector = function () {\n        this.sectorObject = new sector_model_1.SectorModel();\n        this.sectorModal.show();\n    };\n    // show model popup to update sector value\n    SectorComponent.prototype.getSectorValue = function (value) {\n        this.sectorModal.show();\n        this.sectorObject = value;\n    };\n    // delete sector value\n    SectorComponent.prototype.deleteSector = function (sector) {\n        var _this = this;\n        this.sectorService.delete(sector.id).subscribe(function (data) {\n            alert('Sector deleted Successfully.');\n            _this.sectors = _this.sectors.filter(function (u) { return u !== sector; });\n        });\n    };\n    Object.defineProperty(SectorComponent.prototype, \"sector\", {\n        // Set a current time to a variable\n        set: function (sectorObject) {\n            this.createdAt = moment(this.sectorObject.createdAt).format(shared_1.DATE_TIME_FORMAT);\n            this.updatedAt = moment(this.sectorObject.updatedAt).format(shared_1.DATE_TIME_FORMAT);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    tslib_1.__decorate([\n        core_2.ViewChild('sectorModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _a || Object)\n    ], SectorComponent.prototype, \"sectorModal\", void 0);\n    SectorComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-sector',\n            templateUrl: 'sector.component.html'\n        })\n        /**\n         * Class SectorComponent used to create/update a sector, List all sectors.\n         * Declared an sector object to create and update.\n         * Declared an Array variable to set list of sectors.\n         * Using a modal popup directive create and update form is displayed.\n         */\n        ,\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof zonal_service_1.ZonalService !== \"undefined\" && zonal_service_1.ZonalService) === \"function\" && _b || Object, typeof (_c = typeof sector_service_1.SectorService !== \"undefined\" && sector_service_1.SectorService) === \"function\" && _c || Object])\n    ], SectorComponent);\n    return SectorComponent;\n    var _a, _b, _c;\n}());\nexports.SectorComponent = SectorComponent;\n",{"version":3,"file":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/sector.component.ts","sourceRoot":"","sources":["/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/sector.component.ts"],"names":[],"mappings":";;;AAAA,yCAAyC;AACzC,sCAAkD;AAClD,oEAAkE;AAClE,sEAAoE;AAEpE,8DAAqE;AAErE,6CAAqD;AACrD,sCAA0C;AAE1C,+BAAiC;AACjC,qCAA8C;AAI9C,mCAAmC;AAWnC;IAWI,yBAAoB,YAA0B,EAAU,aAA4B;QAAhE,iBAAY,GAAZ,YAAY,CAAc;QAAU,kBAAa,GAAb,aAAa,CAAe;QAVpF,0BAA0B;QAC1B,iBAAY,GAAgB,IAAI,0BAAW,EAAE,CAAC;IASyC,CAAC;IAExF,kCAAQ,GAAR;QACI,oDAAoD;QACpD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED,gDAAgD;IAChD,qCAAW,GAAX;QAAA,iBAKC;QAJG,uBAAuB;QACvB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,UAAC,GAA2B;YAC5D,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iDAAiD;IACjD,uCAAa,GAAb;QAAA,iBAKC;QAJG,uBAAuB;QACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,UAAC,GAA4B;YAC9D,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uDAAuD;IACvD,8BAAI,GAAJ;QACI,kCAAkC;QAClC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,yBAAgB,CAAC,CAAC;QACvE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,yBAAgB,CAAC,CAAC;YACvE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/E,CAAC;IACL,CAAC;IAEO,iDAAuB,GAA/B,UAAgC,MAAyC;QAAzE,iBAYC;QAXG,MAAM,CAAC,SAAS,CACZ,UAAC,GAA0B;YACvB,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,KAAI,CAAC,YAAY,GAAG,IAAI,0BAAW,EAAE,CAAC;YACtC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YAC9C,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,EACD,UAAC,GAAsB;YACnB,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CACJ,CAAC;IACN,CAAC;IAED,0CAA0C;IAC1C,sCAAY,GAAZ;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,0BAAW,EAAE,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,0CAA0C;IAC1C,wCAAc,GAAd,UAAe,KAAkB;QAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,sBAAsB;IACtB,sCAAY,GAAZ,UAAa,MAAmB;QAAhC,iBAKC;QAJG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;YAC/C,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACtC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,MAAM,EAAZ,CAAY,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,sBAAI,mCAAM;QADV,mCAAmC;aACnC,UAAW,YAAyB;YAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,yBAAgB,CAAC,CAAC;YAC9E,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,yBAAgB,CAAC,CAAC;QAClF,CAAC;;;OAAA;IA5EyB;QAAzB,gBAAS,CAAC,aAAa,CAAC;8DAAqB,sBAAc,oBAAd,sBAAc;wDAAC;IATpD,eAAe;QAV3B,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,uBAAuB;SACvC,CAAC;QACF;;;;;WAKG;;qEAYmC,4BAAY,oBAAZ,4BAAY,sDAAyB,8BAAa,oBAAb,8BAAa;OAX3E,eAAe,CAsF3B;IAAD,sBAAC;;CAAA,AAtFD,IAsFC;AAtFY,0CAAe","sourcesContent":["// Import needed component and dependency\nimport { Component, OnInit } from '@angular/core';\nimport { ZonalService } from 'app/entities/service/zonal.service';\nimport { SectorService } from 'app/entities/service/sector.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { ISector, SectorModel } from 'app/shared/model/sector.model';\nimport { IZonal } from 'app/shared/model/zonal.model';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { ViewChild } from '@angular/core';\n\nimport * as moment from 'moment';\nimport { DATE_TIME_FORMAT } from 'app/shared';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n// Mension the html, css/sass files\n@Component({\n    selector: 'jhi-sector',\n    templateUrl: 'sector.component.html'\n})\n/**\n * Class SectorComponent used to create/update a sector, List all sectors.\n * Declared an sector object to create and update.\n * Declared an Array variable to set list of sectors.\n * Using a modal popup directive create and update form is displayed.\n */\nexport class SectorComponent implements OnInit {\n    // Create object for model\n    sectorObject: SectorModel = new SectorModel();\n    // create empty array for each service\n    zonals: IZonal[];\n    sectors: ISector[];\n    createdAt: string;\n    updatedAt: string;\n\n    @ViewChild('sectorModal') public sectorModal: ModalDirective;\n\n    constructor(private zonalService: ZonalService, private sectorService: SectorService) {}\n\n    ngOnInit() {\n        // Call a function to get list of zonals and sectors\n        this.getZoneList();\n        this.getSectorList();\n    }\n\n    // Call a service function to get list of zonals\n    getZoneList(): void {\n        // Get the list of zone\n        this.zonalService.query().subscribe((res: HttpResponse<IZonal[]>) => {\n            this.zonals = res.body;\n        });\n    }\n\n    // Call a service function to get list of sectors\n    getSectorList(): void {\n        // Get the list of zone\n        this.sectorService.query().subscribe((res: HttpResponse<ISector[]>) => {\n            this.sectors = res.body;\n        });\n    }\n\n    // Send a sector object to a service (create or update)\n    save() {\n        // console.log(this.sectorObject);\n        this.sectorObject.updatedAt = moment(this.updatedAt, DATE_TIME_FORMAT);\n        if (this.sectorObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.sectorService.update(this.sectorObject));\n        } else {\n            this.sectorObject.createdAt = moment(this.createdAt, DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.sectorService.create(this.sectorObject));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<ISector>>) {\n        result.subscribe(\n            (res: HttpResponse<ISector>) => {\n                this.sectorModal.hide();\n                this.sectorObject = new SectorModel();\n                alert('Sector Created/Updated Successfully.');\n                this.getSectorList();\n            },\n            (res: HttpErrorResponse) => {\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    // show model popup to create sector value\n    createSector(): void {\n        this.sectorObject = new SectorModel();\n        this.sectorModal.show();\n    }\n\n    // show model popup to update sector value\n    getSectorValue(value: SectorModel): void {\n        this.sectorModal.show();\n        this.sectorObject = value;\n    }\n\n    // delete sector value\n    deleteSector(sector: SectorModel): void {\n        this.sectorService.delete(sector.id).subscribe(data => {\n            alert('Sector deleted Successfully.');\n            this.sectors = this.sectors.filter(u => u !== sector);\n        });\n    }\n\n    // Set a current time to a variable\n    set sector(sectorObject: SectorModel) {\n        this.createdAt = moment(this.sectorObject.createdAt).format(DATE_TIME_FORMAT);\n        this.updatedAt = moment(this.sectorObject.updatedAt).format(DATE_TIME_FORMAT);\n    }\n}\n"]}]}